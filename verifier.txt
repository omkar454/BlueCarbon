import express from "express";
import { ethers } from "ethers";
import tokenJson from "../contracts/CarbonCreditToken.json" assert { type: "json" };
import dotenv from "dotenv";


dotenv.config({
  path: "C:\\bluecarbon-mvp\\backend\\.env",
});

const router = express.Router();

// Provider + signer (Owner / NCCR wallet)
const provider = new ethers.JsonRpcProvider(process.env.ALCHEMY_RPC_URL);
const wallet = new ethers.Wallet(process.env.DEPLOYER_PRIVATE_KEY, provider);

// Contract connection
const tokenAddress = process.env.TOKEN_CONTRACT_ADDRESS;
const tokenContract = new ethers.Contract(tokenAddress, tokenJson.abi, wallet);

/* --------------------- ADD VERIFIER --------------------- */
router.post("/add", async (req, res) => {
  try {
    const { verifierAddress } = req.body;

    if (!verifierAddress || !ethers.isAddress(verifierAddress)) {
      return res.status(400).json({ success: false, error: "Invalid address" });
    }

    const tx = await tokenContract.addVerifier(verifierAddress);
    const receipt = await tx.wait();

    res.json({ success: true, txHash: tx.hash, receipt });
  } catch (err) {
    console.error("❌ Add verifier error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});

/* --------------------- REMOVE VERIFIER --------------------- */
router.post("/remove", async (req, res) => {
  try {
    const { verifierAddress } = req.body;

    if (!verifierAddress || !ethers.isAddress(verifierAddress)) {
      return res.status(400).json({ success: false, error: "Invalid address" });
    }

    const tx = await tokenContract.removeVerifier(verifierAddress);
    const receipt = await tx.wait();

    res.json({ success: true, txHash: tx.hash, receipt });
  } catch (err) {
    console.error("❌ Remove verifier error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});

/* --------------------- LIST ALL VERIFIERS --------------------- */
router.get("/list", async (req, res) => {
  try {
    const verifiersList = [];

    // For demo: you might need to store verifier addresses off-chain to list
    // because mappings are not iterable in Solidity
    res.json({ success: true, verifiers: "Need off-chain tracking" });
  } catch (err) {
    console.error("❌ List verifiers error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});

export default router;
