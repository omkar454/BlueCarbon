// ./routes/retire.js
import express from "express";
import { ethers } from "ethers";
import fs from "fs";
import path from "path";
import PDFDocument from "pdfkit";
import tokenJson from "../contracts/CarbonCreditToken.json" assert { type: "json" };
import dotenv from "dotenv";

dotenv.config({
  path: "C:\\bluecarbon-mvp\\backend\\.env",
});

const router = express.Router();

// Provider + signer (deployer wallet)
const provider = new ethers.JsonRpcProvider(process.env.ALCHEMY_RPC_URL);
const wallet = new ethers.Wallet(process.env.DEPLOYER_PRIVATE_KEY, provider);

// Contract connection
const tokenAddress = process.env.TOKEN_CONTRACT_ADDRESS;
const tokenContract = new ethers.Contract(tokenAddress, tokenJson.abi, wallet);

// Route: POST /certified
router.post("/certified", async (req, res) => {
  try {
    const { buyerAddress, amount, projectName } = req.body;

    // ✅ Validation
    if (!buyerAddress || !ethers.isAddress(buyerAddress)) {
      return res
        .status(400)
        .json({ success: false, error: "Invalid buyerAddress" });
    }
    if (!amount) {
      return res.status(400).json({ success: false, error: "Missing amount" });
    }
    if (!projectName) {
      return res
        .status(400)
        .json({ success: false, error: "Missing projectName" });
    }

    // ✅ Convert to smallest unit (like Wei) for 18-decimal token
    const amountParsed = ethers.parseUnits(amount.toString(), 18);

    // ✅ Retire credits on blockchain
    const tx = await tokenContract.connect(wallet).retireCredits(amountParsed);
    const receipt = await tx.wait();

    // ✅ Generate PDF certificate
    const certificatesDir = path.join(process.cwd(), "certificates");
    if (!fs.existsSync(certificatesDir)) fs.mkdirSync(certificatesDir);

    const pdfPath = path.join(
      certificatesDir,
      `${projectName}-certificate.pdf`
    );
    const doc = new PDFDocument();
    doc.pipe(fs.createWriteStream(pdfPath));

    doc
      .fontSize(18)
      .text("Carbon Credit Retirement Certificate", { align: "center" });
    doc.moveDown();
    doc.fontSize(12).text(`Buyer Wallet: ${buyerAddress}`);
    doc.text(`Project: ${projectName}`);
    doc.text(`Credits Retired: ${amount}`);
    doc.text(`Blockchain TX: ${tx.hash}`);
    doc.end();

    res.json({ success: true, txHash: tx.hash, pdfPath, receipt });
  } catch (err) {
    console.error("❌ Retire error:", err);
    res.status(500).json({ success: false, error: err.message });
  }
});

export default router;
